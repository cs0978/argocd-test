apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: argo-cd
spec:
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
    service:
      type: ''
  grafana:
    enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
    route:
      enabled: false
  monitoring:
    enabled: false
  notifications:
    enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  sso:
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
    provider: dex
  applicationSet:
    resources:
      limits:
        cpu: '2'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    webhookServer:
      ingress:
        enabled: false
      route:
        enabled: false
  rbac:
    defaultPolicy: ""
    policy: |
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
    scopes: '[groups]'
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: '2'
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
    sharding: {}
  repo:
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
    initContainers:
      - name: avp-init
        image: registry.redhat.io/ubi8
        env:
          - name: AVP_VERSION
            value: 1.14.0
        command: [sh, -c]
        args:
          - >-
            curl -L
            https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64
            -o /custom-tools/argocd-vault-plugin && chmod +x /custom-tools/argocd-vault-plugin 
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
    sidecarContainers:
      - name: avp
        image: registry.redhat.io/ubi8
        envFrom:
          - secretRef:
              name: argocd-vault-plugin-credentials
        command: [/var/run/argocd/argocd-cmp-server]
        args: [--loglevel, debug]
        volumeMounts:
          - name: var-files
            mountPath: /var/run/argocd
          - name: plugins
            mountPath: /home/argocd/cmp-server/plugins
          - name: tmp
            mountPath: /tmp
          - name: cmp-plugin
            mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: avp.yaml
          - name: custom-tools
            mountPath: /usr/local/bin/argocd-vault-plugin
            subPath: argocd-vault-plugin
    volumes:
      - name: custom-tools
        emptyDir: {}
      - name: cmp-plugin
        configMap:
          name: cmp-plugin
